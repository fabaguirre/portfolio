---
import SunIcon from "@icons/Sun.astro";
import MoonIcon from "@icons/Moon.astro";
import MacIcon from "@icons/Mac.astro";

const THEMES = [
  {
    value: "light",
    name: "Claro",
    Icon: SunIcon,
  },
  {
    value: "dark",
    name: "Oscuro",
    Icon: MoonIcon,
  },
  {
    value: "system",
    name: "Sistema",
    Icon: MacIcon,
  },
];
---

<div class="relative">
  <button
    id="theme-toggle-btn"
    class="flex appearance-none border-none transition hover:scale-125 [&>svg:not(:first-of-type)]:absolute"
  >
    <span class="sr-only">Elige el tema</span>
    {
      THEMES.map(({ Icon, value }) => (
        <Icon
          data-theme={value}
          aria-label={`Tema ${value}`}
          class="theme-toggle-icon size-5"
        />
      ))
    }
  </button>

  <div
    id="themes-menu"
    class="closed scale-80 absolute right-0 top-8 hidden min-w-[8rem] rounded-md border border-gray-100 bg-white/90 p-1 text-sm shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:border-gray-500/20 dark:bg-gray-900/90"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li
            data-theme={theme.value}
            class="themes-menu-option rounded-sm px-2 py-1.5 hover:bg-neutral-400/40 dark:hover:bg-gray-500/50"
          >
            {theme.name}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu:not(.closed) {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof window.localStorage !== "undefined") {
      return window.localStorage.getItem("theme") ?? "system";
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale =
        element.dataset.theme === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    document.documentElement.style.colorScheme = isDark ? "dark" : "light";
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.add("closed"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    themesMenu.classList.toggle("closed");
  });

  function onThemeClick(e) {
    window.localStorage.setItem("theme", e.target.dataset.theme);
    updateTheme();
  }

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", onThemeClick);
  });
</script>
