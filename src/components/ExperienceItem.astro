---
import { useTranslation } from "@/i18n";

interface Props {
  title: string;
  company: string;
  companyIcon: any;
  type: "remote" | "onsite" | "hybrid";
  startDate: string;
  endDate: string;
  description: string[];
  isCurrent?: boolean;
}

const { currentLocale } = Astro;
const {
  companyIcon: CompanyIcon,
  title,
  company,
  startDate,
  endDate,
  description,
  type,
  isCurrent,
} = Astro.props;

const typeClass = {
  remote: "bg-blue-100 text-blue-800 dark:bg-sky-900 dark:text-sky-300",
  onsite: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
  hybrid:
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
};

const typeColor = typeClass[type];

function formatDate(date: string) {
  return new Date(`${date}T00:00:00`).toLocaleDateString(currentLocale, {
    month: "long",
    year: "numeric",
  });
}

const { t } = useTranslation(currentLocale);
const startDateFormatted = formatDate(startDate);
const endDateFormatted = isCurrent
  ? t("experiences.present")
  : formatDate(endDate);
---

<article class="flex flex-col gap-5 lg:flex-row">
  <span
    class="absolute -start-[17px] flex size-8 items-center justify-center rounded-full bg-accent-400 dark:bg-accent-200"
  >
    <CompanyIcon class="dark:text-dark size-5 text-white" />
  </span>

  <header class="lg:w-2/5">
    <h3
      class="mb-2 flex items-center text-xl font-bold text-accent-600 dark:text-accent-400"
    >
      {title}
    </h3>

    <h4 class="mb-1 text-xl font-semibold">
      <a
        class="hover:underline"
        href="https://www.info.fractalup.com/"
        target="_blank"
      >
        {company}
      </a>
    </h4>

    <p
      aria-label={`PerÃ­odo de trabajo: ${startDateFormatted} - ${endDateFormatted}`}
      class="mb-3 block text-sm font-normal capitalize leading-none light:text-gray-500 lg:mb-5"
    >
      <time datetime={startDate} class="after:content-['-']">
        {startDateFormatted}
      </time>
      <!--  -->
      <time datetime={endDate}>
        {endDateFormatted}
      </time>
    </p>

    <span
      class:list={[
        `rounded px-2.5 py-0.5 text-sm font-medium capitalize`,
        `${typeColor}`,
      ]}
    >
      {type}
    </span>
  </header>

  <div class="flex-1 space-y-5">
    {description.map((desc) => <p class="text-pretty text-base">{desc}</p>)}
  </div>
</article>
